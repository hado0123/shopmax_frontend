import { Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, TextField, Stack, Pagination, Select, MenuItem, FormControl, InputLabel, IconButton, Typography } from '@mui/material'
import DeleteIcon from '@mui/icons-material/Delete'

import dayjs from 'dayjs' //날짜 시간 포맷해주는 패키지
import { formatWithComma } from '../../utils/priceSet'

import { useCallback, useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { useDispatch, useSelector } from 'react-redux'
import { fetchItemsThunk, deleteItemThunk } from '../../features/itemSlice'

const POSTS_PER_PAGE = 5 // 한 페이지에 표시할 게시글 수

function ItemList({ handleDeleteThunk }) {
   const dispatch = useDispatch()
   const { items, pagination, loading, error } = useSelector((state) => state.items)

   const [filteredItems, setFilteredItems] = useState(items || [])
   const [searchTerm, setSearchTerm] = useState('')
   const [searchCategory, setSearchCategory] = useState('itemNm') // 검색 기준
   const [sellCategory, setSellCategory] = useState('ALL') // 검색 기준
   const [page, setPage] = useState(1)

   useEffect(() => {
      dispatch(fetchItemsThunk(page))
   }, [dispatch, page])

   // 검색 핸들러
   const handleSearch = (event) => {
      const searchValue = event.target.value.toLowerCase()
      setSearchTerm(searchValue)

      const filtered = items.filter((item) => {
         const matchesCategory = searchCategory === 'itemNm' ? item.itemNm.toLowerCase().includes(searchValue) : true
         const matchesSellStatus = sellCategory === 'ALL' || item.itemSellStatus === sellCategory

         return matchesCategory && matchesSellStatus
      })

      setFilteredItems(filtered)
      setPage(1) // 검색 시 페이지를 첫 번째로 초기화
   }

   // 카테고리 변경 핸들러
   const handleSearchCategoryChange = (event) => {
      setSearchCategory(event.target.value)
      setSearchTerm('') // 검색어 초기화
      setFilteredItems(items) // 전체 게시글 표시
      setPage(1) // 첫 페이지로 초기화
   }

   // 판매상태 변경 핸들러
   const handleSellCategoryChange = (event) => {
      const selectedCategory = event.target.value
      setSellCategory(selectedCategory)

      const filtered = items.filter((item) => {
         const matchesCategory = searchCategory === 'itemNm' ? item.itemNm.toLowerCase().includes(searchTerm) : true
         const matchesSellStatus = selectedCategory === 'ALL' || item.itemSellStatus === selectedCategory

         return matchesCategory && matchesSellStatus
      })

      setFilteredItems(filtered)
      setPage(1) // 판매 상태 변경 시 페이지를 첫 번째로 초기화
   }

   // 페이지 변경 핸들러
   const handlePageChange = (event, value) => {
      setPage(value)
   }

   // 현재 페이지에 표시할 게시글 계산
   const startIndex = (page - 1) * POSTS_PER_PAGE
   const currentItems = filteredItems.slice(startIndex, startIndex + POSTS_PER_PAGE)

   if (loading) {
      return (
         <Typography variant="body1" align="center">
            상품 로딩 중...
         </Typography>
      )
   }

   if (error) {
      return (
         <Typography variant="body1" align="center" color="error">
            에러 발생: {error}
         </Typography>
      )
   }

   return (
      <Box sx={{ p: 4 }}>
         {/* 검색 기준과 검색창 */}
         <Box
            sx={{
               display: 'flex',
               alignItems: 'center',
               gap: 2,
               flexWrap: 'wrap', // 화면 크기에 따라 줄바꿈
               mb: 2,
            }}
         >
            {/* 검색 기준 */}
            <FormControl sx={{ minWidth: 120 }} size="small">
               <InputLabel>검색 기준</InputLabel>
               <Select value={searchCategory} onChange={handleSearchCategoryChange} label="검색 기준">
                  <MenuItem value="itemNm">상품명</MenuItem>
               </Select>
            </FormControl>

            {/* 검색 기준 */}
            <FormControl sx={{ minWidth: 120 }} size="small">
               <InputLabel>판매 상태</InputLabel>
               <Select value={sellCategory} onChange={handleSellCategoryChange} label="판매 상태">
                  <MenuItem value="ALL">전체</MenuItem>
                  <MenuItem value="SELL">판매중</MenuItem>
                  <MenuItem value="SOLD_OUT">품절</MenuItem>
               </Select>
            </FormControl>

            {/* 검색 입력 */}
            <TextField
               label="검색"
               variant="outlined"
               size="small"
               value={searchTerm}
               onChange={handleSearch}
               placeholder="검색어 입력"
               sx={{ flex: 1 }} // 검색창이 넓게 표시되도록 설정
            />
         </Box>

         <TableContainer component={Paper}>
            <Table>
               <TableHead>
                  <TableRow>
                     <TableCell align="center">번호</TableCell>
                     <TableCell>상품명</TableCell>
                     <TableCell align="center">가격</TableCell>
                     <TableCell align="center">판매상태</TableCell>
                     <TableCell align="center">등록일</TableCell>
                     <TableCell align="center">삭제</TableCell>
                  </TableRow>
               </TableHead>
               <TableBody>
                  {currentItems.length > 0 ? (
                     currentItems.map((item) => (
                        <TableRow key={item.id}>
                           <TableCell align="center">{item.id}</TableCell>
                           <TableCell>
                              {' '}
                              <Link to={`/items/edit/${item.id}`} style={{ textDecoration: 'none', color: 'inherit' }}>
                                 {item.itemNm}
                              </Link>
                           </TableCell>
                           <TableCell align="center">{formatWithComma(String(item.price))}</TableCell>
                           <TableCell align="center">{item.itemSellStatus}</TableCell>
                           <TableCell align="center">{dayjs(item.createdAt).format('YYYY-MM-DD HH:mm:ss')}</TableCell>
                           <TableCell align="center">
                              <IconButton aria-label="delete" onClick={() => handleDeleteThunk(`${item.id}`)}>
                                 <DeleteIcon />
                              </IconButton>
                           </TableCell>
                        </TableRow>
                     ))
                  ) : (
                     <TableRow>
                        <TableCell colSpan={5} align="center">
                           등록된 상품이 없습니다.
                        </TableCell>
                     </TableRow>
                  )}
               </TableBody>
            </Table>
         </TableContainer>
         <Stack spacing={2} sx={{ mt: 3, alignItems: 'center' }}>
            <Pagination
               count={Math.ceil(filteredItems.length / POSTS_PER_PAGE)} // 총 페이지 수
               page={page} // 현재 페이지
               onChange={handlePageChange} // 페이지 변경 핸들러
            />
         </Stack>
         <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
            <Link to="/items/create">
               <Button variant="contained">상품등록</Button>
            </Link>
         </Box>
      </Box>
   )
}

export default ItemList
